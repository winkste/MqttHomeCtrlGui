/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.Color;
import javax.swing.SwingWorker;
import myMqtt.MqttSubscriber;

/**
 *
 * @author winkste
 */
public class homeTempPanel extends javax.swing.JPanel {

    private double humidityThreshold_d = 50.0;
    private Color standardBgColor_c; 
    private boolean genData = false;
    /**
     * Creates new form homeTempPanel
     * @param room
     */
    public homeTempPanel(String room) {
        initComponents();
        room_sjl.setText(room);
        standardBgColor_c = jPanel1.getBackground();
    }
    
    public homeTempPanel(String room, boolean newGenData) {
        initComponents();
        room_sjl.setText(room);
        genData = newGenData;
        standardBgColor_c = jPanel1.getBackground();
        new DataCollector().execute();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        room_sjl = new javax.swing.JLabel();
        temp_sjl = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        humidity_sjl = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(788, 377));
        setMinimumSize(new java.awt.Dimension(788, 377));
        setPreferredSize(new java.awt.Dimension(788, 377));

        jPanel1.setBackground(new java.awt.Color(204, 255, 204));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setPreferredSize(new java.awt.Dimension(1012, 455));
        jPanel1.setRequestFocusEnabled(false);

        room_sjl.setFont(new java.awt.Font("Arial Black", 0, 60)); // NOI18N
        room_sjl.setForeground(new java.awt.Color(102, 102, 102));
        room_sjl.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        room_sjl.setText("Raum");

        temp_sjl.setFont(new java.awt.Font("Arial Black", 1, 110)); // NOI18N
        temp_sjl.setForeground(new java.awt.Color(102, 102, 102));
        temp_sjl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        temp_sjl.setText("+00.0");

        jLabel3.setFont(new java.awt.Font("Arial Black", 0, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setText("Temperatur");

        jLabel4.setFont(new java.awt.Font("Arial Black", 0, 110)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 102, 102));
        jLabel4.setText("Â°C");

        jLabel5.setFont(new java.awt.Font("Arial Black", 0, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(102, 102, 102));
        jLabel5.setText("Luftfeuchtigkeit");
        jLabel5.setToolTipText("");
        jLabel5.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        humidity_sjl.setFont(new java.awt.Font("Arial Black", 1, 80)); // NOI18N
        humidity_sjl.setForeground(new java.awt.Color(102, 102, 102));
        humidity_sjl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        humidity_sjl.setText("+00.0");

        jLabel7.setFont(new java.awt.Font("Arial Black", 0, 80)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(102, 102, 102));
        jLabel7.setText("%");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(room_sjl, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addGap(55, 55, 55)
                            .addComponent(temp_sjl, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jLabel4))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jLabel5)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(humidity_sjl, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jLabel7))))
                .addContainerGap(62, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(room_sjl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(temp_sjl, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(humidity_sjl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 788, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(7, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel humidity_sjl;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel room_sjl;
    private javax.swing.JLabel temp_sjl;
    // End of variables declaration//GEN-END:variables

    public MqttSubscriber getMqttSubscriberTemperature(String filter) {
        return(new MqttSubscriber(){
            @Override
            public String getFilter() {
                return(filter);
            }

            @Override
            public void notify(String msg) {
                if(genData != true)
                {
                    temp_sjl.setText(msg);
                }
            }
        });
    }
    
    public MqttSubscriber getMqttSubscriberHumidity(String filter) {
        return(new MqttSubscriber(){
            @Override
            public String getFilter() {
                return(filter);
            }

            @Override
            public void notify(String msg) {
                if(genData != true)
                {
                    humidity_sjl.setText(msg);
                    if(humidityThreshold_d < Float.parseFloat(msg))
                    {
                        jPanel1.setBackground(new java.awt.Color(255,102,102)); 

                    }
                    else
                    {
                        jPanel1.setBackground(standardBgColor_c);
                    }
                }
            }
        });
    }
    
    public void SetHumidityThreshold(double newThreshold_d){
        humidityThreshold_d = newThreshold_d;
    }
     
    double temp = 25.0;
    double hum = 45.0;
        
    class DataCollector extends SwingWorker<Long, Object>
    {

        @Override
        protected Long doInBackground() throws Exception {
            try 
            { 
                Thread.sleep(1000);
            } catch ( InterruptedException e ) { }
            new DataCollector().execute();
            return (0L);
        }
        
        @Override protected void done()
        {
            try
            {
                temp_sjl.setText(String.format("%2.2f",temp));
                //System.out.println("" + String.format("%2.2f",temp));
                humidity_sjl.setText(String.format("%2.2f",hum));  
                temp += 0.1;
                hum += 0.1;
                if(temp > 30.0)
                    temp = 25.0;
                if(hum > 49.0)
                    hum = 45.0;
            }
            catch ( /* InterruptedException, ExecutionException */ Exception e ) { }
        }
    }
}
